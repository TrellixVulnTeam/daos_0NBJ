#!/usr/bin/python3

import os
import sys
import subprocess
from collections import OrderedDict

# File generated by pre-commit hook.
MSG_FILE='.amp-diff'

class NotTag(Exception):
    """Nothing"""
    
def get_tag_kv(line):
    """Convert a line of test to a key/value"""

    if ':' not in line:
        raise NotTag
    (raw_key, value) = line.split(':', maxsplit=1)
    key = raw_key.strip()
    if key in ('Date', 'Author', 'Signed-off-by', 'Merge', 'Co-authored-by'):
        raise NotTag
    if ' ' in key:
        raise NotTag
    return (key, value.strip())  

def main():
    input_file = sys.argv[1]

    def add_text():
        output = '# ------------------------ >8 ------------------------\n'
        output += 'Skip-func-hw-test: true\n'
        output += 'Skip-func-test: true\n'
        output += 'Quick-Functional: true\n'
        output += 'Test-tag: dfuse\n'
        if os.path.exists(MSG_FILE):
            with open(MSG_FILE, 'r') as new:
                for newline in new.readlines():
                    output += newline
            os.unlink(MSG_FILE)
        return output

    if os.path.exists('.git/MERGE_HEAD'):
        print('Not modifying merge-head')
        return

    tags = OrderedDict()
    rc = subprocess.run(['git', 'log', '-1'], stdout=subprocess.PIPE)
    for line in rc.stdout.decode('utf-8').splitlines():
        if ':' not in line:
            continue;
        (raw_key, value) = line.split(':', maxsplit=1)
        key = raw_key.strip()
        if key in ('Date', 'Author', 'Signed-off-by', 'Merge', 'Co-authored-by'):
            continue
        if ' ' in key:
            continue

        tags[key] = value.strip()
        
    with open(input_file, 'r+') as fd:

        file_lines = []
        # Check for existing tags.
        for line in fd.readlines():
            file_lines.append(line)
            try:
                (tag, value) = get_tag_kv(line)
                try:
                    del tags[tag]
                except KeyError:
                    file_lines.pop()
                    pass
            except NotTag:
                pass
            
        output = []
        matched = False
        for line in file_lines:
            if not matched and line.startswith('#'):
                matched = True

                idx = -1
                if output[idx] == '':
                    idx -= 1

                for (key, value) in tags.items():
                    output.insert(idx, '{}: {}\n'.format(key, value))

                output.append(add_text())
                
            output.append(line.strip('\n'))

        if not matched:
            output.append(add_text())

        fd.seek(0)
        fd.truncate(0)
        fd.write('\n'.join(output))

if __name__ == '__main__':
    main()
